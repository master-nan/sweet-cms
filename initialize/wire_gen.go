// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package initialize

import (
	"github.com/casbin/casbin/v2"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
	"sweet-cms/cache"
	"sweet-cms/config"
	"sweet-cms/controller"
	"sweet-cms/inter"
	"sweet-cms/repository"
	"sweet-cms/repository/impl"
	"sweet-cms/service"
	"sweet-cms/utils"
)

import (
	_ "sweet-cms/docs"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	server, err := LoadConfig()
	if err != nil {
		return nil, err
	}
	db, err := InitDB(server)
	if err != nil {
		return nil, err
	}
	client, err := InitRedis(server)
	if err != nil {
		return nil, err
	}
	snowflake, err := InitSnowflake(server)
	if err != nil {
		return nil, err
	}
	jwtTokenGen := utils.NewJWTTokenGen()
	enforcer, err := InitCasbin(db)
	if err != nil {
		return nil, err
	}
	sysDictRepositoryImpl := impl.NewSysDictRepositoryImpl(db)
	sysDictItemRepositoryImpl := impl.NewSysDictItemRepositoryImpl(db)
	redisUtil := utils.NewRedisUtil(client)
	sysDictCache := cache.NewSysDictCache(redisUtil)
	sysDictService := service.NewSysDictService(sysDictRepositoryImpl, sysDictItemRepositoryImpl, snowflake, sysDictCache)
	v, err := InitValidators()
	if err != nil {
		return nil, err
	}
	dictController := controller.NewDictController(sysDictService, v)
	sysConfigureRepositoryImpl := impl.NewSysConfigureRepositoryImpl(db)
	sysConfigureCache := cache.NewSysConfigureCache(redisUtil)
	sysConfigureService := service.NewSysConfigureService(sysConfigureRepositoryImpl, sysConfigureCache)
	loginLogRepositoryImpl := impl.NewLoginLogRepositoryImpl(db)
	accessLogRepositoryImpl := impl.NewAccessLogRepositoryImpl(db)
	logService := service.NewLogServer(loginLogRepositoryImpl, accessLogRepositoryImpl, snowflake)
	sysUserRepositoryImpl := impl.NewSysUserRepositoryImpl(db)
	sysUserCache := cache.NewSysUserCache(redisUtil)
	sysUserService := service.NewSysUserService(sysUserRepositoryImpl, snowflake, sysUserCache)
	basicController := controller.NewBasicController(jwtTokenGen, server, sysConfigureService, logService, sysUserService, v)
	sysTableRepositoryImpl := impl.NewSysTableRepositoryImpl(db)
	sysTableFieldRepositoryImpl := impl.NewSysTableFieldRepositoryImpl(db)
	sysTableIndexRepositoryImpl := impl.NewSysTableIndexRepositoryImpl(db)
	sysTableIndexFieldRepositoryImpl := impl.NewSysTableIndexFieldRepositoryImpl(db)
	sysTableRelationRepositoryImpl := impl.NewSysTableRelationRepositoryImpl(db)
	sysTableCache := cache.NewSysTableCache(redisUtil)
	sysTableFieldCache := cache.NewSysTableFieldCache(redisUtil)
	sysTableService := service.NewSysTableService(sysTableRepositoryImpl, sysTableFieldRepositoryImpl, sysTableIndexRepositoryImpl, sysTableIndexFieldRepositoryImpl, sysTableRelationRepositoryImpl, snowflake, sysTableCache, sysTableFieldCache, server)
	tableController := controller.NewTableController(sysTableService, v)
	userController := controller.NewUserController(sysUserService, v)
	generalizationRepositoryImpl := impl.NewGeneralizationRepositoryImpl(db)
	generalizationService := service.NewGeneralizationService(generalizationRepositoryImpl)
	generalizationController := controller.NewGeneralizationController(generalizationService, sysTableService)
	blackUserCache := cache.NewBlackCache(redisUtil)
	app := &App{
		Config:                   server,
		DB:                       db,
		Redis:                    client,
		SF:                       snowflake,
		JWT:                      jwtTokenGen,
		Enforcer:                 enforcer,
		DictController:           dictController,
		BasicController:          basicController,
		TableController:          tableController,
		UserController:           userController,
		GeneralizationController: generalizationController,
		LogService:               logService,
		UserService:              sysUserService,
		BlackCache:               blackUserCache,
	}
	return app, nil
}

// wire.go:

type App struct {
	Config                   *config.Server
	DB                       *gorm.DB
	Redis                    *redis.Client
	SF                       *utils.Snowflake
	JWT                      *utils.JWTTokenGen
	Enforcer                 *casbin.Enforcer
	DictController           *controller.DictController
	BasicController          *controller.BasicController
	TableController          *controller.TableController
	UserController           *controller.UserController
	GeneralizationController *controller.GeneralizationController
	LogService               *service.LogService
	UserService              *service.SysUserService
	BlackCache               *cache.BlackUserCache
}

// Repository providers
var RepositoryProvider = wire.NewSet(impl.NewAccessLogRepositoryImpl, impl.NewLoginLogRepositoryImpl, impl.NewSysConfigureRepositoryImpl, impl.NewSysDictRepositoryImpl, impl.NewSysDictItemRepositoryImpl, impl.NewSysTableIndexFieldRepositoryImpl, impl.NewSysTableIndexRepositoryImpl, impl.NewSysTableRelationRepositoryImpl, impl.NewSysTableFieldRepositoryImpl, impl.NewSysTableRepositoryImpl, impl.NewSysUserRepositoryImpl, impl.NewSysMenuRepositoryImpl, impl.NewSysMenuButtonRepositoryImpl, impl.NewSysRoleRepositoryImpl, impl.NewSysRoleMenuButtonRepositoryImpl, impl.NewSysRoleMenuRepositoryImpl, impl.NewSysUserMenuDataPermissionRepositoryImpl, impl.NewSysUserRoleRepositoryImpl, impl.NewGeneralizationRepositoryImpl, impl.NewCasbinRuleRepositoryImpl, impl.NewBasicImpl, wire.Bind(new(repository.AccessLogRepository), new(*impl.AccessLogRepositoryImpl)), wire.Bind(new(repository.LoginLogRepository), new(*impl.LoginLogRepositoryImpl)), wire.Bind(new(repository.SysConfigureRepository), new(*impl.SysConfigureRepositoryImpl)), wire.Bind(new(repository.SysDictRepository), new(*impl.SysDictRepositoryImpl)), wire.Bind(new(repository.SysDictItemRepository), new(*impl.SysDictItemRepositoryImpl)), wire.Bind(new(repository.SysTableIndexFieldRepository), new(*impl.SysTableIndexFieldRepositoryImpl)), wire.Bind(new(repository.SysTableIndexRepository), new(*impl.SysTableIndexRepositoryImpl)), wire.Bind(new(repository.SysTableRelationRepository), new(*impl.SysTableRelationRepositoryImpl)), wire.Bind(new(repository.SysTableFieldRepository), new(*impl.SysTableFieldRepositoryImpl)), wire.Bind(new(repository.SysTableRepository), new(*impl.SysTableRepositoryImpl)), wire.Bind(new(repository.SysUserRepository), new(*impl.SysUserRepositoryImpl)), wire.Bind(new(repository.SysMenuRepository), new(*impl.SysMenuRepositoryImpl)), wire.Bind(new(repository.SysMenuButtonRepository), new(*impl.SysMenuButtonRepositoryImpl)), wire.Bind(new(repository.SysRoleRepository), new(*impl.SysRoleRepositoryImpl)), wire.Bind(new(repository.SysRoleMenuButtonRepository), new(*impl.SysRoleMenuButtonRepositoryImpl)), wire.Bind(new(repository.SysRoleMenuRepository), new(*impl.SysRoleMenuRepositoryImpl)), wire.Bind(new(repository.SysUserMenuDataPermissionRepository), new(*impl.SysUserMenuDataPermissionRepositoryImpl)), wire.Bind(new(repository.SysUserRoleRepository), new(*impl.SysUserRoleRepositoryImpl)), wire.Bind(new(repository.GeneralizationRepository), new(*impl.GeneralizationRepositoryImpl)), wire.Bind(new(repository.CasbinRuleRepository), new(*impl.CasbinRuleRepositoryImpl)), wire.Bind(new(repository.BasicRepository), new(*impl.BasicImpl)))

// Cache providers
var CacheProvider = wire.NewSet(cache.NewSysConfigureCache, cache.NewSysUserRoleCache, cache.NewSysUserCache, cache.NewSysMenuButtonCache, cache.NewSysDictCache, cache.NewSysMenuCache, cache.NewSysRoleCache, cache.NewSysRoleMenuButtonCache, cache.NewSysRoleMenuCache, cache.NewSysUserMenuDataPermissionCache, cache.NewSysTableCache, cache.NewSysTableFieldCache, cache.NewGeneralizationCache, cache.NewBlackCache)

// Service providers
var ServiceProvider = wire.NewSet(service.NewLogServer, service.NewSysConfigureService, service.NewSysDictService, service.NewSysRoleService, service.NewSysMenuService, service.NewSysTableService, service.NewSysUserService, service.NewGeneralizationService, service.NewCasbinRuleService)

// Controller providers
var ControllerProvider = wire.NewSet(controller.NewDictController, controller.NewTableController, controller.NewUserController, controller.NewBasicController, controller.NewGeneralizationController)

var Providers = wire.NewSet(
	LoadConfig,
	InitDB,
	InitRedis,
	InitCasbin,
	InitSnowflake,
	InitValidators, utils.NewJWTTokenGen, utils.NewRedisUtil, wire.Bind(new(inter.CacheInterface), new(*utils.RedisUtil)), wire.Bind(new(inter.TokenGenerator), new(*utils.JWTTokenGen)), RepositoryProvider,
	CacheProvider,
	ServiceProvider,
	ControllerProvider, wire.Struct(new(App), "*"),
)
